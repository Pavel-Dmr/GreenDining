<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ecom4.green.order.dao.OrdersDAO">
    <select id="getOrdersPage" parameterType="RequestPageList" resultType="ordersDTO">
        select *
        from orders
        <where>
            user_id = #{data.user_id}
        </where>
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="getOrdersCount" parameterType="map" resultType="int">
        select count(*) as cnt
        from orders
        where user_id = #{map.user_id}
    </select>
    <select id="getOrderItemList" parameterType="int" resultType="orderItemDTO">
        select *
        from order_item
        where order_id = #{order_id}
    </select>
    <select id="getOrderDetail" parameterType="int" resultType="ordersDTO">
        select *
        from orders
        <where>
            id = #{order_id}
        </where>
    </select>

    <select id="countInDelivery" resultType="int">
        SELECT COUNT(*)
        FROM orders
        WHERE user_id = #{userId} AND status = '배송중'
    </select>

    <insert id="insertOrder">
        <bind name="status" value="'결제완료'"/>
        <selectKey keyProperty="id" order="BEFORE" resultType="int">
            SELECT NVL(MAX(ID),0)+1 FROM orders
        </selectKey>
        insert into orders(id,address_id,user_id,status,created_at)
        values(#{id},#{address_id},#{user_id},#{status},sysdate)
    </insert>

    <select id="selectMaxOrderId" resultType="int">
        select nvl(max(id),0) from orders
    </select>

    <insert id="insertOrderItemList" parameterType="list">
        <bind name="status" value="'구매완료'"/>
        BEGIN
        <foreach item="orderItemDTO" collection="list" separator=" ">
            INSERT INTO order_item (order_id, product_id,sale_id,quantity,status,store_name,before_price,after_price)
            VALUES (#{order_id}, #{orderItemDTO.product_id}, #{orderItemDTO.sale_id},
            #{orderItemDTO.quantity},#{status},#{orderItemDTO.store_name},#{orderItemDTO.before_price},#{orderItemDTO.after_price});
        </foreach>
        END;
    </insert>
    
    <update id="updateOrderTransactionId" parameterType="map">
        UPDATE orders
        SET transaction_id = #{map.transaction_id}, payment = #{map.payment}
        WHERE id = #{map.order_id}
    </update>
    <update id="cancelOrder">
        <bind name="status_cancel" value="'취소완료'"/>
        UPDATE orders
        SET status = #{status_cancel}
        where id = #{order_id}
    </update>
	<select id="getMOrdersPage" parameterType="RequestPageList" resultType="ordersDTO">
    select o.* from orders o
    join order_item oi on o.id = oi.order_id
		    <where>
		        <if test="data.category != null and data.category != 0">
		            o.category_code = #{data.category}
		        </if>
		        <if test="data.store_name != null and data.store_name != ''">
		            and oi.store_name = #{data.store_name}
		        </if>
		    </where>
		    OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
	</select>
	<select id="getMOrdersListCount" parameterType="map" resultType="int">
    SELECT count(*)
    FROM order_item
    INNER JOIN orders ON order_item.order_id = orders.id 
	    <where>
	        order_item.store_name = #{map.store_name}
	    </where>
	</select>
	<select id="getUserAddress" parameterType="int" resultType="AddressDTO">
		SELECT user_id, name, address, address2, zipcode, request_option, request_text, id, phone FROM address WHERE id = #{address_id}
	</select>

	<update id="updateDelivery" parameterType="ordersDTO">
		update orders set
		status = #{status}		
		where id = #{id}
	</update>
	<delete id="deleteOrder" parameterType="ordersDTO">
		delete from orders
		where id = #{id}
	</delete>
	<select id="countOrdersByStatus" parameterType="map" resultType="int">
		SELECT COUNT(*)
		    FROM ORDERS o
		    JOIN order_item oi on o.id = oi.order_id
		    WHERE oi.STORE_NAME = #{storeName} AND o.STATUS = #{status}
	</select>

	<select id="getProductByOrderId" parameterType="int" resultType="ProductDTO">
	SELECT p.* 
	FROM product p 
	JOIN order_item oi ON p.id = oi.product_id 
	WHERE oi.order_id = #{order_id}
	</select>
	<select id="getStoreNameByMerchantId" parameterType="String" resultType="String">
	    SELECT store_name
	    FROM merchant
	    WHERE id = #{merchant_id}
	</select>
	
	<delete id="deleteOrderItem" parameterType="ordersDTO">
		delete from order_item
		where order_id = #{id}
	</delete>
	
</mapper>